// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

// use the reduce method in combo with the concat method to flattern 
// an array of arrays into a single array that has all the elements
// of the original arrays
// 
function flatten(arrays){
  // reduce method
  return arrays.reduce(function(accumulator, current){
    // return accumulator + current into array
    return accumulator.concat(current);
  }, []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

// provides something like a for loop
function loop(value, test, update, body) {
  // for (let i = 0; i < array.length; i++)
  for (let i = value; test(i); i = update(i)){
    body(i);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, func) {
  for (let i = 0; i < array.length; i++){
    if (!func(array[i])){
      return false;
    }
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  // create a variable ltr and initialize as empty array
  let ltr = [];
  // create a variable rtl and initialize as empty array
  let rtl = [];
  // iterate through input string using for loop
  for (let i = 0; i < string.length; i++){
    // create a variable script and assign it the result of invoking characterScript on the current character's char code
    let script = characterScript(string.charCodeAt(i)); // let script = {...}
    // determine if script is not equal to null
    if (script !== null){
      if (script.direction === "ltr"){
        ltr.push(script);
      } else {
        rtl.push(script);
      }
    }
  }
  if (ltr.length > rtl.length){
    return "ltr";
  } else {
    return "rtl";
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
